<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;

/**
 * @file
 * Contains hooks for Config Override Inspector.
 */

/**
 * Implements hook_module_implements_alter().
 */
function coi_module_implements_alter(array &$implementations, string $hook) {
  if ($hook == 'form_alter') {
    if (!isset($implementations['config_override_core_fields'])) {
      return;
    }

    $implementations_original = $implementations;

    // Detects if config_override_core_fields module is enabled, and if so moves
    // our 'hook_form_alter' after it.
    $config_override_core_fields_group = $implementations_original['config_override_core_fields'];
    unset($implementations_original['config_override_core_fields']);

    // Rebuild implementations.
    $implementations = [];
    foreach ($implementations_original as $key => $implementation) {
      if ($key === 'coi') {
        $implementations['config_override_core_fields'] = $config_override_core_fields_group;
      }
      $implementations[$key] = $implementation;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function coi_form_alter(array &$form, FormStateInterface $form_state, string $form_id) : void {
  /** @var \Drupal\coi\CoiFormAlterationsInterface $service */
  $service = \Drupal::service('coi.form_alterations');
  $service->hookFormAlter($form, $form_state, $form_id);
}

/**
 * Preprocessor for all elements.
 *
 * @see \coi_element_info_alter()
 */
function coi_element_preprocessor(array &$element, FormStateInterface $form_state, ?array &$complete_form) : array {
  if (isset($element["#coi_override_message"])) {
    $element['#theme_wrappers'][] = 'coi_container';
  }
  return $element;
}

/**
 * Implements hook_element_info_alter().
 */
function coi_element_info_alter(array &$types) : void {
  foreach ($types as &$type) {
    $type['#process'][] = 'coi_element_preprocessor';
  }
}

/**
 * Implements hook_theme().
 */
function coi_theme(array $existing, string $type, string $theme, string $path) : array {
  return [
    'coi_container' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_token_info().
 */
function coi_token_info() : array {
  return [
    'types' => [
      'coi' => [
        'name' => t('Configuration Override Inspector'),
        'description' => t('Tokens for configuration overrides.'),
        'needs-data' => 'coi',
      ],
    ],
    'tokens' => [
      'coi' => [
        'overridden-value' => [
          'name' => t("Overridden value"),
          'description' => t("Show override value. This value is not set if no override is applicable."),
        ],
        'active-value' => [
          'name' => t("Current value"),
          'description' => t("Show active value. This is the value before overrides are applied."),
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_tokens().
 */
function coi_tokens(string $type, array $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) : array {
  $replacements = [];

  if ($type == 'coi' && !empty($data['coi'])) {
    /** @var array $values */
    $values = $data['coi'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'active-value':
          $replacements[$original] = $values['active-value'];
          break;

        case 'overridden-value':
          $replacements[$original] = $values['overridden-value'];
          break;

      }
    }
  }

  return $replacements;
}

/**
 * Prepares variables for COI container templates.
 *
 * Default template: coi-container.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 */
function template_preprocess_coi_container(array &$variables) : void {
  $element = $variables['element'];
  $variables['children'] = $element['#children'];
  $variables['override_message']= $element["#coi_override_message"];
}
